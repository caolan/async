{
  "type": "Program",
  "body": [
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportDefaultSpecifier",
          "local": {
            "type": "Identifier",
            "name": "someLimit",
            "range": [
              7,
              16
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 7
              },
              "end": {
                "line": 1,
                "column": 16
              }
            }
          },
          "range": [
            7,
            16
          ],
          "loc": {
            "start": {
              "line": 1,
              "column": 7
            },
            "end": {
              "line": 1,
              "column": 16
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "./someLimit",
        "raw": "'./someLimit'",
        "range": [
          22,
          35
        ],
        "loc": {
          "start": {
            "line": 1,
            "column": 22
          },
          "end": {
            "line": 1,
            "column": 35
          }
        }
      },
      "range": [
        0,
        36
      ],
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 1,
          "column": 36
        }
      }
    },
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportDefaultSpecifier",
          "local": {
            "type": "Identifier",
            "name": "doLimit",
            "range": [
              44,
              51
            ],
            "loc": {
              "start": {
                "line": 2,
                "column": 7
              },
              "end": {
                "line": 2,
                "column": 14
              }
            }
          },
          "range": [
            44,
            51
          ],
          "loc": {
            "start": {
              "line": 2,
              "column": 7
            },
            "end": {
              "line": 2,
              "column": 14
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "./internal/doLimit",
        "raw": "'./internal/doLimit'",
        "range": [
          57,
          77
        ],
        "loc": {
          "start": {
            "line": 2,
            "column": 20
          },
          "end": {
            "line": 2,
            "column": 40
          }
        }
      },
      "range": [
        37,
        78
      ],
      "loc": {
        "start": {
          "line": 2,
          "column": 0
        },
        "end": {
          "line": 2,
          "column": 41
        }
      },
      "trailingComments": [
        {
          "type": "Block",
          "value": "*\n * The same as `some` but runs only a single async operation at a time.\n *\n * @name someSeries\n * @static\n * @memberOf async\n * @see async.some\n * @alias anySeries\n * @category Collection\n * @param {Array|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A truth test to apply to each item in the array\n * in parallel. The iteratee is passed a `callback(err, truthValue)` which must\n * be called with a boolean argument once it has completed. Invoked with\n * (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the iteratee functions have finished.\n * Result will be either `true` or `false` depending on the values of the async\n * tests. Invoked with (err, result).\n ",
          "range": [
            80,
            864
          ],
          "loc": {
            "start": {
              "line": 4,
              "column": 0
            },
            "end": {
              "line": 22,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportDefaultDeclaration",
      "declaration": {
        "type": "CallExpression",
        "callee": {
          "type": "Identifier",
          "name": "doLimit",
          "range": [
            880,
            887
          ],
          "loc": {
            "start": {
              "line": 23,
              "column": 15
            },
            "end": {
              "line": 23,
              "column": 22
            }
          }
        },
        "arguments": [
          {
            "type": "Identifier",
            "name": "someLimit",
            "range": [
              888,
              897
            ],
            "loc": {
              "start": {
                "line": 23,
                "column": 23
              },
              "end": {
                "line": 23,
                "column": 32
              }
            }
          },
          {
            "type": "Literal",
            "value": 1,
            "raw": "1",
            "range": [
              899,
              900
            ],
            "loc": {
              "start": {
                "line": 23,
                "column": 34
              },
              "end": {
                "line": 23,
                "column": 35
              }
            }
          }
        ],
        "range": [
          880,
          901
        ],
        "loc": {
          "start": {
            "line": 23,
            "column": 15
          },
          "end": {
            "line": 23,
            "column": 36
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": "*\n * The same as `some` but runs only a single async operation at a time.\n *\n * @name someSeries\n * @static\n * @memberOf async\n * @see async.some\n * @alias anySeries\n * @category Collection\n * @param {Array|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A truth test to apply to each item in the array\n * in parallel. The iteratee is passed a `callback(err, truthValue)` which must\n * be called with a boolean argument once it has completed. Invoked with\n * (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the iteratee functions have finished.\n * Result will be either `true` or `false` depending on the values of the async\n * tests. Invoked with (err, result).\n ",
            "range": [
              80,
              864
            ],
            "loc": {
              "start": {
                "line": 4,
                "column": 0
              },
              "end": {
                "line": 22,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": []
      },
      "range": [
        865,
        902
      ],
      "loc": {
        "start": {
          "line": 23,
          "column": 0
        },
        "end": {
          "line": 23,
          "column": 37
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": "*\n * The same as `some` but runs only a single async operation at a time.\n *\n * @name someSeries\n * @static\n * @memberOf async\n * @see async.some\n * @alias anySeries\n * @category Collection\n * @param {Array|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A truth test to apply to each item in the array\n * in parallel. The iteratee is passed a `callback(err, truthValue)` which must\n * be called with a boolean argument once it has completed. Invoked with\n * (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the iteratee functions have finished.\n * Result will be either `true` or `false` depending on the values of the async\n * tests. Invoked with (err, result).\n ",
          "range": [
            80,
            864
          ],
          "loc": {
            "start": {
              "line": 4,
              "column": 0
            },
            "end": {
              "line": 22,
              "column": 3
            }
          }
        }
      ]
    }
  ],
  "sourceType": "module",
  "range": [
    0,
    902
  ],
  "loc": {
    "start": {
      "line": 1,
      "column": 0
    },
    "end": {
      "line": 23,
      "column": 37
    }
  },
  "comments": [
    {
      "type": "Block",
      "value": "*\n * The same as `some` but runs only a single async operation at a time.\n *\n * @name someSeries\n * @static\n * @memberOf async\n * @see async.some\n * @alias anySeries\n * @category Collection\n * @param {Array|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A truth test to apply to each item in the array\n * in parallel. The iteratee is passed a `callback(err, truthValue)` which must\n * be called with a boolean argument once it has completed. Invoked with\n * (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the iteratee functions have finished.\n * Result will be either `true` or `false` depending on the values of the async\n * tests. Invoked with (err, result).\n ",
      "range": [
        80,
        864
      ],
      "loc": {
        "start": {
          "line": 4,
          "column": 0
        },
        "end": {
          "line": 22,
          "column": 3
        }
      }
    }
  ]
}