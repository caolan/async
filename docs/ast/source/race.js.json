{
  "type": "Program",
  "body": [
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportDefaultSpecifier",
          "local": {
            "type": "Identifier",
            "name": "isArray",
            "range": [
              7,
              14
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 7
              },
              "end": {
                "line": 1,
                "column": 14
              }
            }
          },
          "range": [
            7,
            14
          ],
          "loc": {
            "start": {
              "line": 1,
              "column": 7
            },
            "end": {
              "line": 1,
              "column": 14
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "lodash/isArray",
        "raw": "'lodash/isArray'",
        "range": [
          20,
          36
        ],
        "loc": {
          "start": {
            "line": 1,
            "column": 20
          },
          "end": {
            "line": 1,
            "column": 36
          }
        }
      },
      "range": [
        0,
        37
      ],
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 1,
          "column": 37
        }
      }
    },
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportDefaultSpecifier",
          "local": {
            "type": "Identifier",
            "name": "each",
            "range": [
              45,
              49
            ],
            "loc": {
              "start": {
                "line": 2,
                "column": 7
              },
              "end": {
                "line": 2,
                "column": 11
              }
            }
          },
          "range": [
            45,
            49
          ],
          "loc": {
            "start": {
              "line": 2,
              "column": 7
            },
            "end": {
              "line": 2,
              "column": 11
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "lodash/each",
        "raw": "'lodash/each'",
        "range": [
          55,
          68
        ],
        "loc": {
          "start": {
            "line": 2,
            "column": 17
          },
          "end": {
            "line": 2,
            "column": 30
          }
        }
      },
      "range": [
        38,
        69
      ],
      "loc": {
        "start": {
          "line": 2,
          "column": 0
        },
        "end": {
          "line": 2,
          "column": 31
        }
      }
    },
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportDefaultSpecifier",
          "local": {
            "type": "Identifier",
            "name": "noop",
            "range": [
              77,
              81
            ],
            "loc": {
              "start": {
                "line": 3,
                "column": 7
              },
              "end": {
                "line": 3,
                "column": 11
              }
            }
          },
          "range": [
            77,
            81
          ],
          "loc": {
            "start": {
              "line": 3,
              "column": 7
            },
            "end": {
              "line": 3,
              "column": 11
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "lodash/noop",
        "raw": "'lodash/noop'",
        "range": [
          87,
          100
        ],
        "loc": {
          "start": {
            "line": 3,
            "column": 17
          },
          "end": {
            "line": 3,
            "column": 30
          }
        }
      },
      "range": [
        70,
        101
      ],
      "loc": {
        "start": {
          "line": 3,
          "column": 0
        },
        "end": {
          "line": 3,
          "column": 31
        }
      }
    },
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportDefaultSpecifier",
          "local": {
            "type": "Identifier",
            "name": "once",
            "range": [
              109,
              113
            ],
            "loc": {
              "start": {
                "line": 4,
                "column": 7
              },
              "end": {
                "line": 4,
                "column": 11
              }
            }
          },
          "range": [
            109,
            113
          ],
          "loc": {
            "start": {
              "line": 4,
              "column": 7
            },
            "end": {
              "line": 4,
              "column": 11
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "./internal/once",
        "raw": "'./internal/once'",
        "range": [
          119,
          136
        ],
        "loc": {
          "start": {
            "line": 4,
            "column": 17
          },
          "end": {
            "line": 4,
            "column": 34
          }
        }
      },
      "range": [
        102,
        137
      ],
      "loc": {
        "start": {
          "line": 4,
          "column": 0
        },
        "end": {
          "line": 4,
          "column": 35
        }
      },
      "trailingComments": [
        {
          "type": "Block",
          "value": "*\n * Runs the `tasks` array of functions in parallel, without waiting until the\n * previous function has completed. Once any the `tasks` completed or pass an\n * error to its callback, the main `callback` is immediately called. It's\n * equivalent to `Promise.race()`.\n *\n * @name race\n * @static\n * @memberOf async\n * @category Control Flow\n * @param {Array} tasks - An array containing functions to run. Each function\n * is passed a `callback(err, result)` which it must call on completion with an\n * error `err` (which can be `null`) and an optional `result` value.\n * @param {Function} callback - A callback to run once any of the functions have\n * completed. This function gets an error or result from the first function that\n * completed. Invoked with (err, result).\n * @returns undefined\n * @example\n *\n * async.race([\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ],\n * // main callback\n * function(err, result) {\n *     // the result will be equal to 'two' as it finishes earlier\n * });\n ",
          "range": [
            139,
            1356
          ],
          "loc": {
            "start": {
              "line": 6,
              "column": 0
            },
            "end": {
              "line": 41,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportDefaultDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "race",
          "range": [
            1381,
            1385
          ],
          "loc": {
            "start": {
              "line": 42,
              "column": 24
            },
            "end": {
              "line": 42,
              "column": 28
            }
          }
        },
        "params": [
          {
            "type": "Identifier",
            "name": "tasks",
            "range": [
              1386,
              1391
            ],
            "loc": {
              "start": {
                "line": 42,
                "column": 29
              },
              "end": {
                "line": 42,
                "column": 34
              }
            }
          },
          {
            "type": "Identifier",
            "name": "callback",
            "range": [
              1393,
              1401
            ],
            "loc": {
              "start": {
                "line": 42,
                "column": 36
              },
              "end": {
                "line": 42,
                "column": 44
              }
            }
          }
        ],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "ExpressionStatement",
              "expression": {
                "type": "AssignmentExpression",
                "operator": "=",
                "left": {
                  "type": "Identifier",
                  "name": "callback",
                  "range": [
                    1409,
                    1417
                  ],
                  "loc": {
                    "start": {
                      "line": 43,
                      "column": 4
                    },
                    "end": {
                      "line": 43,
                      "column": 12
                    }
                  }
                },
                "right": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "once",
                    "range": [
                      1420,
                      1424
                    ],
                    "loc": {
                      "start": {
                        "line": 43,
                        "column": 15
                      },
                      "end": {
                        "line": 43,
                        "column": 19
                      }
                    }
                  },
                  "arguments": [
                    {
                      "type": "LogicalExpression",
                      "operator": "||",
                      "left": {
                        "type": "Identifier",
                        "name": "callback",
                        "range": [
                          1425,
                          1433
                        ],
                        "loc": {
                          "start": {
                            "line": 43,
                            "column": 20
                          },
                          "end": {
                            "line": 43,
                            "column": 28
                          }
                        }
                      },
                      "right": {
                        "type": "Identifier",
                        "name": "noop",
                        "range": [
                          1437,
                          1441
                        ],
                        "loc": {
                          "start": {
                            "line": 43,
                            "column": 32
                          },
                          "end": {
                            "line": 43,
                            "column": 36
                          }
                        }
                      },
                      "range": [
                        1425,
                        1441
                      ],
                      "loc": {
                        "start": {
                          "line": 43,
                          "column": 20
                        },
                        "end": {
                          "line": 43,
                          "column": 36
                        }
                      }
                    }
                  ],
                  "range": [
                    1420,
                    1442
                  ],
                  "loc": {
                    "start": {
                      "line": 43,
                      "column": 15
                    },
                    "end": {
                      "line": 43,
                      "column": 37
                    }
                  }
                },
                "range": [
                  1409,
                  1442
                ],
                "loc": {
                  "start": {
                    "line": 43,
                    "column": 4
                  },
                  "end": {
                    "line": 43,
                    "column": 37
                  }
                }
              },
              "range": [
                1409,
                1443
              ],
              "loc": {
                "start": {
                  "line": 43,
                  "column": 4
                },
                "end": {
                  "line": 43,
                  "column": 38
                }
              }
            },
            {
              "type": "IfStatement",
              "test": {
                "type": "UnaryExpression",
                "operator": "!",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "isArray",
                    "range": [
                      1453,
                      1460
                    ],
                    "loc": {
                      "start": {
                        "line": 44,
                        "column": 9
                      },
                      "end": {
                        "line": 44,
                        "column": 16
                      }
                    }
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "tasks",
                      "range": [
                        1461,
                        1466
                      ],
                      "loc": {
                        "start": {
                          "line": 44,
                          "column": 17
                        },
                        "end": {
                          "line": 44,
                          "column": 22
                        }
                      }
                    }
                  ],
                  "range": [
                    1453,
                    1467
                  ],
                  "loc": {
                    "start": {
                      "line": 44,
                      "column": 9
                    },
                    "end": {
                      "line": 44,
                      "column": 23
                    }
                  }
                },
                "prefix": true,
                "range": [
                  1452,
                  1467
                ],
                "loc": {
                  "start": {
                    "line": 44,
                    "column": 8
                  },
                  "end": {
                    "line": 44,
                    "column": 23
                  }
                }
              },
              "consequent": {
                "type": "ReturnStatement",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "callback",
                    "range": [
                      1476,
                      1484
                    ],
                    "loc": {
                      "start": {
                        "line": 44,
                        "column": 32
                      },
                      "end": {
                        "line": 44,
                        "column": 40
                      }
                    }
                  },
                  "arguments": [
                    {
                      "type": "NewExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "TypeError",
                        "range": [
                          1489,
                          1498
                        ],
                        "loc": {
                          "start": {
                            "line": 44,
                            "column": 45
                          },
                          "end": {
                            "line": 44,
                            "column": 54
                          }
                        }
                      },
                      "arguments": [
                        {
                          "type": "Literal",
                          "value": "First argument to race must be an array of functions",
                          "raw": "'First argument to race must be an array of functions'",
                          "range": [
                            1499,
                            1553
                          ],
                          "loc": {
                            "start": {
                              "line": 44,
                              "column": 55
                            },
                            "end": {
                              "line": 44,
                              "column": 109
                            }
                          }
                        }
                      ],
                      "range": [
                        1485,
                        1554
                      ],
                      "loc": {
                        "start": {
                          "line": 44,
                          "column": 41
                        },
                        "end": {
                          "line": 44,
                          "column": 110
                        }
                      }
                    }
                  ],
                  "range": [
                    1476,
                    1555
                  ],
                  "loc": {
                    "start": {
                      "line": 44,
                      "column": 32
                    },
                    "end": {
                      "line": 44,
                      "column": 111
                    }
                  }
                },
                "range": [
                  1469,
                  1556
                ],
                "loc": {
                  "start": {
                    "line": 44,
                    "column": 25
                  },
                  "end": {
                    "line": 44,
                    "column": 112
                  }
                }
              },
              "alternate": null,
              "range": [
                1448,
                1556
              ],
              "loc": {
                "start": {
                  "line": 44,
                  "column": 4
                },
                "end": {
                  "line": 44,
                  "column": 112
                }
              }
            },
            {
              "type": "IfStatement",
              "test": {
                "type": "UnaryExpression",
                "operator": "!",
                "argument": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "Identifier",
                    "name": "tasks",
                    "range": [
                      1566,
                      1571
                    ],
                    "loc": {
                      "start": {
                        "line": 45,
                        "column": 9
                      },
                      "end": {
                        "line": 45,
                        "column": 14
                      }
                    }
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "length",
                    "range": [
                      1572,
                      1578
                    ],
                    "loc": {
                      "start": {
                        "line": 45,
                        "column": 15
                      },
                      "end": {
                        "line": 45,
                        "column": 21
                      }
                    }
                  },
                  "range": [
                    1566,
                    1578
                  ],
                  "loc": {
                    "start": {
                      "line": 45,
                      "column": 9
                    },
                    "end": {
                      "line": 45,
                      "column": 21
                    }
                  }
                },
                "prefix": true,
                "range": [
                  1565,
                  1578
                ],
                "loc": {
                  "start": {
                    "line": 45,
                    "column": 8
                  },
                  "end": {
                    "line": 45,
                    "column": 21
                  }
                }
              },
              "consequent": {
                "type": "ReturnStatement",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "callback",
                    "range": [
                      1587,
                      1595
                    ],
                    "loc": {
                      "start": {
                        "line": 45,
                        "column": 30
                      },
                      "end": {
                        "line": 45,
                        "column": 38
                      }
                    }
                  },
                  "arguments": [],
                  "range": [
                    1587,
                    1597
                  ],
                  "loc": {
                    "start": {
                      "line": 45,
                      "column": 30
                    },
                    "end": {
                      "line": 45,
                      "column": 40
                    }
                  }
                },
                "range": [
                  1580,
                  1598
                ],
                "loc": {
                  "start": {
                    "line": 45,
                    "column": 23
                  },
                  "end": {
                    "line": 45,
                    "column": 41
                  }
                }
              },
              "alternate": null,
              "range": [
                1561,
                1598
              ],
              "loc": {
                "start": {
                  "line": 45,
                  "column": 4
                },
                "end": {
                  "line": 45,
                  "column": 41
                }
              }
            },
            {
              "type": "ExpressionStatement",
              "expression": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "each",
                  "range": [
                    1603,
                    1607
                  ],
                  "loc": {
                    "start": {
                      "line": 46,
                      "column": 4
                    },
                    "end": {
                      "line": 46,
                      "column": 8
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "Identifier",
                    "name": "tasks",
                    "range": [
                      1608,
                      1613
                    ],
                    "loc": {
                      "start": {
                        "line": 46,
                        "column": 9
                      },
                      "end": {
                        "line": 46,
                        "column": 14
                      }
                    }
                  },
                  {
                    "type": "FunctionExpression",
                    "id": null,
                    "params": [
                      {
                        "type": "Identifier",
                        "name": "task",
                        "range": [
                          1625,
                          1629
                        ],
                        "loc": {
                          "start": {
                            "line": 46,
                            "column": 26
                          },
                          "end": {
                            "line": 46,
                            "column": 30
                          }
                        }
                      }
                    ],
                    "body": {
                      "type": "BlockStatement",
                      "body": [
                        {
                          "type": "ExpressionStatement",
                          "expression": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "Identifier",
                              "name": "task",
                              "range": [
                                1641,
                                1645
                              ],
                              "loc": {
                                "start": {
                                  "line": 47,
                                  "column": 8
                                },
                                "end": {
                                  "line": 47,
                                  "column": 12
                                }
                              }
                            },
                            "arguments": [
                              {
                                "type": "Identifier",
                                "name": "callback",
                                "range": [
                                  1646,
                                  1654
                                ],
                                "loc": {
                                  "start": {
                                    "line": 47,
                                    "column": 13
                                  },
                                  "end": {
                                    "line": 47,
                                    "column": 21
                                  }
                                }
                              }
                            ],
                            "range": [
                              1641,
                              1655
                            ],
                            "loc": {
                              "start": {
                                "line": 47,
                                "column": 8
                              },
                              "end": {
                                "line": 47,
                                "column": 22
                              }
                            }
                          },
                          "range": [
                            1641,
                            1656
                          ],
                          "loc": {
                            "start": {
                              "line": 47,
                              "column": 8
                            },
                            "end": {
                              "line": 47,
                              "column": 23
                            }
                          }
                        }
                      ],
                      "range": [
                        1631,
                        1662
                      ],
                      "loc": {
                        "start": {
                          "line": 46,
                          "column": 32
                        },
                        "end": {
                          "line": 48,
                          "column": 5
                        }
                      }
                    },
                    "generator": false,
                    "expression": false,
                    "range": [
                      1615,
                      1662
                    ],
                    "loc": {
                      "start": {
                        "line": 46,
                        "column": 16
                      },
                      "end": {
                        "line": 48,
                        "column": 5
                      }
                    }
                  }
                ],
                "range": [
                  1603,
                  1663
                ],
                "loc": {
                  "start": {
                    "line": 46,
                    "column": 4
                  },
                  "end": {
                    "line": 48,
                    "column": 6
                  }
                }
              },
              "range": [
                1603,
                1664
              ],
              "loc": {
                "start": {
                  "line": 46,
                  "column": 4
                },
                "end": {
                  "line": 48,
                  "column": 7
                }
              }
            }
          ],
          "range": [
            1403,
            1666
          ],
          "loc": {
            "start": {
              "line": 42,
              "column": 46
            },
            "end": {
              "line": 49,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          1372,
          1666
        ],
        "loc": {
          "start": {
            "line": 42,
            "column": 15
          },
          "end": {
            "line": 49,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": "*\n * Runs the `tasks` array of functions in parallel, without waiting until the\n * previous function has completed. Once any the `tasks` completed or pass an\n * error to its callback, the main `callback` is immediately called. It's\n * equivalent to `Promise.race()`.\n *\n * @name race\n * @static\n * @memberOf async\n * @category Control Flow\n * @param {Array} tasks - An array containing functions to run. Each function\n * is passed a `callback(err, result)` which it must call on completion with an\n * error `err` (which can be `null`) and an optional `result` value.\n * @param {Function} callback - A callback to run once any of the functions have\n * completed. This function gets an error or result from the first function that\n * completed. Invoked with (err, result).\n * @returns undefined\n * @example\n *\n * async.race([\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ],\n * // main callback\n * function(err, result) {\n *     // the result will be equal to 'two' as it finishes earlier\n * });\n ",
            "range": [
              139,
              1356
            ],
            "loc": {
              "start": {
                "line": 6,
                "column": 0
              },
              "end": {
                "line": 41,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": []
      },
      "range": [
        1357,
        1666
      ],
      "loc": {
        "start": {
          "line": 42,
          "column": 0
        },
        "end": {
          "line": 49,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": "*\n * Runs the `tasks` array of functions in parallel, without waiting until the\n * previous function has completed. Once any the `tasks` completed or pass an\n * error to its callback, the main `callback` is immediately called. It's\n * equivalent to `Promise.race()`.\n *\n * @name race\n * @static\n * @memberOf async\n * @category Control Flow\n * @param {Array} tasks - An array containing functions to run. Each function\n * is passed a `callback(err, result)` which it must call on completion with an\n * error `err` (which can be `null`) and an optional `result` value.\n * @param {Function} callback - A callback to run once any of the functions have\n * completed. This function gets an error or result from the first function that\n * completed. Invoked with (err, result).\n * @returns undefined\n * @example\n *\n * async.race([\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ],\n * // main callback\n * function(err, result) {\n *     // the result will be equal to 'two' as it finishes earlier\n * });\n ",
          "range": [
            139,
            1356
          ],
          "loc": {
            "start": {
              "line": 6,
              "column": 0
            },
            "end": {
              "line": 41,
              "column": 3
            }
          }
        }
      ]
    }
  ],
  "sourceType": "module",
  "range": [
    0,
    1666
  ],
  "loc": {
    "start": {
      "line": 1,
      "column": 0
    },
    "end": {
      "line": 49,
      "column": 1
    }
  },
  "comments": [
    {
      "type": "Block",
      "value": "*\n * Runs the `tasks` array of functions in parallel, without waiting until the\n * previous function has completed. Once any the `tasks` completed or pass an\n * error to its callback, the main `callback` is immediately called. It's\n * equivalent to `Promise.race()`.\n *\n * @name race\n * @static\n * @memberOf async\n * @category Control Flow\n * @param {Array} tasks - An array containing functions to run. Each function\n * is passed a `callback(err, result)` which it must call on completion with an\n * error `err` (which can be `null`) and an optional `result` value.\n * @param {Function} callback - A callback to run once any of the functions have\n * completed. This function gets an error or result from the first function that\n * completed. Invoked with (err, result).\n * @returns undefined\n * @example\n *\n * async.race([\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ],\n * // main callback\n * function(err, result) {\n *     // the result will be equal to 'two' as it finishes earlier\n * });\n ",
      "range": [
        139,
        1356
      ],
      "loc": {
        "start": {
          "line": 6,
          "column": 0
        },
        "end": {
          "line": 41,
          "column": 3
        }
      }
    }
  ]
}