{
  "type": "Program",
  "body": [
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportDefaultSpecifier",
          "local": {
            "type": "Identifier",
            "name": "everyLimit",
            "range": [
              7,
              17
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 7
              },
              "end": {
                "line": 1,
                "column": 17
              }
            }
          },
          "range": [
            7,
            17
          ],
          "loc": {
            "start": {
              "line": 1,
              "column": 7
            },
            "end": {
              "line": 1,
              "column": 17
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "./everyLimit",
        "raw": "'./everyLimit'",
        "range": [
          23,
          37
        ],
        "loc": {
          "start": {
            "line": 1,
            "column": 23
          },
          "end": {
            "line": 1,
            "column": 37
          }
        }
      },
      "range": [
        0,
        38
      ],
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 1,
          "column": 38
        }
      }
    },
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportDefaultSpecifier",
          "local": {
            "type": "Identifier",
            "name": "doLimit",
            "range": [
              46,
              53
            ],
            "loc": {
              "start": {
                "line": 2,
                "column": 7
              },
              "end": {
                "line": 2,
                "column": 14
              }
            }
          },
          "range": [
            46,
            53
          ],
          "loc": {
            "start": {
              "line": 2,
              "column": 7
            },
            "end": {
              "line": 2,
              "column": 14
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "./internal/doLimit",
        "raw": "'./internal/doLimit'",
        "range": [
          59,
          79
        ],
        "loc": {
          "start": {
            "line": 2,
            "column": 20
          },
          "end": {
            "line": 2,
            "column": 40
          }
        }
      },
      "range": [
        39,
        80
      ],
      "loc": {
        "start": {
          "line": 2,
          "column": 0
        },
        "end": {
          "line": 2,
          "column": 41
        }
      },
      "trailingComments": [
        {
          "type": "Block",
          "value": "*\n * The same as `every` but runs only a single async operation at a time.\n *\n * @name everySeries\n * @static\n * @memberOf async\n * @see async.every\n * @alias allSeries\n * @category Collection\n * @param {Array|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A truth test to apply to each item in the\n * collection in parallel. The iteratee is passed a `callback(err, truthValue)`\n * which must be called with a  boolean argument once it has completed. Invoked\n * with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result will be either `true` or `false`\n * depending on the values of the async tests. Invoked with (err, result).\n ",
          "range": [
            82,
            831
          ],
          "loc": {
            "start": {
              "line": 4,
              "column": 0
            },
            "end": {
              "line": 21,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportDefaultDeclaration",
      "declaration": {
        "type": "CallExpression",
        "callee": {
          "type": "Identifier",
          "name": "doLimit",
          "range": [
            847,
            854
          ],
          "loc": {
            "start": {
              "line": 22,
              "column": 15
            },
            "end": {
              "line": 22,
              "column": 22
            }
          }
        },
        "arguments": [
          {
            "type": "Identifier",
            "name": "everyLimit",
            "range": [
              855,
              865
            ],
            "loc": {
              "start": {
                "line": 22,
                "column": 23
              },
              "end": {
                "line": 22,
                "column": 33
              }
            }
          },
          {
            "type": "Literal",
            "value": 1,
            "raw": "1",
            "range": [
              867,
              868
            ],
            "loc": {
              "start": {
                "line": 22,
                "column": 35
              },
              "end": {
                "line": 22,
                "column": 36
              }
            }
          }
        ],
        "range": [
          847,
          869
        ],
        "loc": {
          "start": {
            "line": 22,
            "column": 15
          },
          "end": {
            "line": 22,
            "column": 37
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": "*\n * The same as `every` but runs only a single async operation at a time.\n *\n * @name everySeries\n * @static\n * @memberOf async\n * @see async.every\n * @alias allSeries\n * @category Collection\n * @param {Array|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A truth test to apply to each item in the\n * collection in parallel. The iteratee is passed a `callback(err, truthValue)`\n * which must be called with a  boolean argument once it has completed. Invoked\n * with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result will be either `true` or `false`\n * depending on the values of the async tests. Invoked with (err, result).\n ",
            "range": [
              82,
              831
            ],
            "loc": {
              "start": {
                "line": 4,
                "column": 0
              },
              "end": {
                "line": 21,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": []
      },
      "range": [
        832,
        870
      ],
      "loc": {
        "start": {
          "line": 22,
          "column": 0
        },
        "end": {
          "line": 22,
          "column": 38
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": "*\n * The same as `every` but runs only a single async operation at a time.\n *\n * @name everySeries\n * @static\n * @memberOf async\n * @see async.every\n * @alias allSeries\n * @category Collection\n * @param {Array|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A truth test to apply to each item in the\n * collection in parallel. The iteratee is passed a `callback(err, truthValue)`\n * which must be called with a  boolean argument once it has completed. Invoked\n * with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result will be either `true` or `false`\n * depending on the values of the async tests. Invoked with (err, result).\n ",
          "range": [
            82,
            831
          ],
          "loc": {
            "start": {
              "line": 4,
              "column": 0
            },
            "end": {
              "line": 21,
              "column": 3
            }
          }
        }
      ]
    }
  ],
  "sourceType": "module",
  "range": [
    0,
    870
  ],
  "loc": {
    "start": {
      "line": 1,
      "column": 0
    },
    "end": {
      "line": 22,
      "column": 38
    }
  },
  "comments": [
    {
      "type": "Block",
      "value": "*\n * The same as `every` but runs only a single async operation at a time.\n *\n * @name everySeries\n * @static\n * @memberOf async\n * @see async.every\n * @alias allSeries\n * @category Collection\n * @param {Array|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A truth test to apply to each item in the\n * collection in parallel. The iteratee is passed a `callback(err, truthValue)`\n * which must be called with a  boolean argument once it has completed. Invoked\n * with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result will be either `true` or `false`\n * depending on the values of the async tests. Invoked with (err, result).\n ",
      "range": [
        82,
        831
      ],
      "loc": {
        "start": {
          "line": 4,
          "column": 0
        },
        "end": {
          "line": 21,
          "column": 3
        }
      }
    }
  ]
}