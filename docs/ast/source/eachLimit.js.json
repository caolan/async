{
  "type": "Program",
  "body": [
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportDefaultSpecifier",
          "local": {
            "type": "Identifier",
            "name": "eachOfLimit",
            "range": [
              7,
              18
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 7
              },
              "end": {
                "line": 1,
                "column": 18
              }
            }
          },
          "range": [
            7,
            18
          ],
          "loc": {
            "start": {
              "line": 1,
              "column": 7
            },
            "end": {
              "line": 1,
              "column": 18
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "./internal/eachOfLimit",
        "raw": "'./internal/eachOfLimit'",
        "range": [
          24,
          48
        ],
        "loc": {
          "start": {
            "line": 1,
            "column": 24
          },
          "end": {
            "line": 1,
            "column": 48
          }
        }
      },
      "range": [
        0,
        49
      ],
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 1,
          "column": 49
        }
      }
    },
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportDefaultSpecifier",
          "local": {
            "type": "Identifier",
            "name": "withoutIndex",
            "range": [
              57,
              69
            ],
            "loc": {
              "start": {
                "line": 2,
                "column": 7
              },
              "end": {
                "line": 2,
                "column": 19
              }
            }
          },
          "range": [
            57,
            69
          ],
          "loc": {
            "start": {
              "line": 2,
              "column": 7
            },
            "end": {
              "line": 2,
              "column": 19
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "./internal/withoutIndex",
        "raw": "'./internal/withoutIndex'",
        "range": [
          75,
          100
        ],
        "loc": {
          "start": {
            "line": 2,
            "column": 25
          },
          "end": {
            "line": 2,
            "column": 50
          }
        }
      },
      "range": [
        50,
        101
      ],
      "loc": {
        "start": {
          "line": 2,
          "column": 0
        },
        "end": {
          "line": 2,
          "column": 51
        }
      },
      "trailingComments": [
        {
          "type": "Block",
          "value": "*\n * The same as `each` but runs a maximum of `limit` async operations at a time.\n *\n * @name eachLimit\n * @static\n * @memberOf async\n * @see async.each\n * @alias forEachLimit\n * @category Collection\n * @param {Array|Object} coll - A colleciton to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} iteratee - A function to apply to each item in `coll`. The\n * iteratee is passed a `callback(err)` which must be called once it has\n * completed. If no error has occurred, the `callback` should be run without\n * arguments or with an explicit `null` argument. The array index is not passed\n * to the iteratee. Invoked with (item, callback). If you need the index, use\n * `eachOfLimit`.\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n ",
          "range": [
            103,
            1002
          ],
          "loc": {
            "start": {
              "line": 4,
              "column": 0
            },
            "end": {
              "line": 23,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportDefaultDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "eachLimit",
          "range": [
            1027,
            1036
          ],
          "loc": {
            "start": {
              "line": 24,
              "column": 24
            },
            "end": {
              "line": 24,
              "column": 33
            }
          }
        },
        "params": [
          {
            "type": "Identifier",
            "name": "coll",
            "range": [
              1037,
              1041
            ],
            "loc": {
              "start": {
                "line": 24,
                "column": 34
              },
              "end": {
                "line": 24,
                "column": 38
              }
            }
          },
          {
            "type": "Identifier",
            "name": "limit",
            "range": [
              1043,
              1048
            ],
            "loc": {
              "start": {
                "line": 24,
                "column": 40
              },
              "end": {
                "line": 24,
                "column": 45
              }
            }
          },
          {
            "type": "Identifier",
            "name": "iteratee",
            "range": [
              1050,
              1058
            ],
            "loc": {
              "start": {
                "line": 24,
                "column": 47
              },
              "end": {
                "line": 24,
                "column": 55
              }
            }
          },
          {
            "type": "Identifier",
            "name": "callback",
            "range": [
              1060,
              1068
            ],
            "loc": {
              "start": {
                "line": 24,
                "column": 57
              },
              "end": {
                "line": 24,
                "column": 65
              }
            }
          }
        ],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "ExpressionStatement",
              "expression": {
                "type": "CallExpression",
                "callee": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "eachOfLimit",
                    "range": [
                      1076,
                      1087
                    ],
                    "loc": {
                      "start": {
                        "line": 25,
                        "column": 4
                      },
                      "end": {
                        "line": 25,
                        "column": 15
                      }
                    }
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "limit",
                      "range": [
                        1088,
                        1093
                      ],
                      "loc": {
                        "start": {
                          "line": 25,
                          "column": 16
                        },
                        "end": {
                          "line": 25,
                          "column": 21
                        }
                      }
                    }
                  ],
                  "range": [
                    1076,
                    1094
                  ],
                  "loc": {
                    "start": {
                      "line": 25,
                      "column": 4
                    },
                    "end": {
                      "line": 25,
                      "column": 22
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "Identifier",
                    "name": "coll",
                    "range": [
                      1095,
                      1099
                    ],
                    "loc": {
                      "start": {
                        "line": 25,
                        "column": 23
                      },
                      "end": {
                        "line": 25,
                        "column": 27
                      }
                    }
                  },
                  {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "withoutIndex",
                      "range": [
                        1101,
                        1113
                      ],
                      "loc": {
                        "start": {
                          "line": 25,
                          "column": 29
                        },
                        "end": {
                          "line": 25,
                          "column": 41
                        }
                      }
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "iteratee",
                        "range": [
                          1114,
                          1122
                        ],
                        "loc": {
                          "start": {
                            "line": 25,
                            "column": 42
                          },
                          "end": {
                            "line": 25,
                            "column": 50
                          }
                        }
                      }
                    ],
                    "range": [
                      1101,
                      1123
                    ],
                    "loc": {
                      "start": {
                        "line": 25,
                        "column": 29
                      },
                      "end": {
                        "line": 25,
                        "column": 51
                      }
                    }
                  },
                  {
                    "type": "Identifier",
                    "name": "callback",
                    "range": [
                      1125,
                      1133
                    ],
                    "loc": {
                      "start": {
                        "line": 25,
                        "column": 53
                      },
                      "end": {
                        "line": 25,
                        "column": 61
                      }
                    }
                  }
                ],
                "range": [
                  1076,
                  1134
                ],
                "loc": {
                  "start": {
                    "line": 25,
                    "column": 4
                  },
                  "end": {
                    "line": 25,
                    "column": 62
                  }
                }
              },
              "range": [
                1076,
                1135
              ],
              "loc": {
                "start": {
                  "line": 25,
                  "column": 4
                },
                "end": {
                  "line": 25,
                  "column": 63
                }
              }
            }
          ],
          "range": [
            1070,
            1137
          ],
          "loc": {
            "start": {
              "line": 24,
              "column": 67
            },
            "end": {
              "line": 26,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          1018,
          1137
        ],
        "loc": {
          "start": {
            "line": 24,
            "column": 15
          },
          "end": {
            "line": 26,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": "*\n * The same as `each` but runs a maximum of `limit` async operations at a time.\n *\n * @name eachLimit\n * @static\n * @memberOf async\n * @see async.each\n * @alias forEachLimit\n * @category Collection\n * @param {Array|Object} coll - A colleciton to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} iteratee - A function to apply to each item in `coll`. The\n * iteratee is passed a `callback(err)` which must be called once it has\n * completed. If no error has occurred, the `callback` should be run without\n * arguments or with an explicit `null` argument. The array index is not passed\n * to the iteratee. Invoked with (item, callback). If you need the index, use\n * `eachOfLimit`.\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n ",
            "range": [
              103,
              1002
            ],
            "loc": {
              "start": {
                "line": 4,
                "column": 0
              },
              "end": {
                "line": 23,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": []
      },
      "range": [
        1003,
        1137
      ],
      "loc": {
        "start": {
          "line": 24,
          "column": 0
        },
        "end": {
          "line": 26,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": "*\n * The same as `each` but runs a maximum of `limit` async operations at a time.\n *\n * @name eachLimit\n * @static\n * @memberOf async\n * @see async.each\n * @alias forEachLimit\n * @category Collection\n * @param {Array|Object} coll - A colleciton to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} iteratee - A function to apply to each item in `coll`. The\n * iteratee is passed a `callback(err)` which must be called once it has\n * completed. If no error has occurred, the `callback` should be run without\n * arguments or with an explicit `null` argument. The array index is not passed\n * to the iteratee. Invoked with (item, callback). If you need the index, use\n * `eachOfLimit`.\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n ",
          "range": [
            103,
            1002
          ],
          "loc": {
            "start": {
              "line": 4,
              "column": 0
            },
            "end": {
              "line": 23,
              "column": 3
            }
          }
        }
      ]
    }
  ],
  "sourceType": "module",
  "range": [
    0,
    1137
  ],
  "loc": {
    "start": {
      "line": 1,
      "column": 0
    },
    "end": {
      "line": 26,
      "column": 1
    }
  },
  "comments": [
    {
      "type": "Block",
      "value": "*\n * The same as `each` but runs a maximum of `limit` async operations at a time.\n *\n * @name eachLimit\n * @static\n * @memberOf async\n * @see async.each\n * @alias forEachLimit\n * @category Collection\n * @param {Array|Object} coll - A colleciton to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} iteratee - A function to apply to each item in `coll`. The\n * iteratee is passed a `callback(err)` which must be called once it has\n * completed. If no error has occurred, the `callback` should be run without\n * arguments or with an explicit `null` argument. The array index is not passed\n * to the iteratee. Invoked with (item, callback). If you need the index, use\n * `eachOfLimit`.\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n ",
      "range": [
        103,
        1002
      ],
      "loc": {
        "start": {
          "line": 4,
          "column": 0
        },
        "end": {
          "line": 23,
          "column": 3
        }
      }
    }
  ]
}