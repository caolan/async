{
  "type": "Program",
  "body": [
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportDefaultSpecifier",
          "local": {
            "type": "Identifier",
            "name": "_eachOfLimit",
            "range": [
              7,
              19
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 7
              },
              "end": {
                "line": 1,
                "column": 19
              }
            }
          },
          "range": [
            7,
            19
          ],
          "loc": {
            "start": {
              "line": 1,
              "column": 7
            },
            "end": {
              "line": 1,
              "column": 19
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "./internal/eachOfLimit",
        "raw": "'./internal/eachOfLimit'",
        "range": [
          25,
          49
        ],
        "loc": {
          "start": {
            "line": 1,
            "column": 25
          },
          "end": {
            "line": 1,
            "column": 49
          }
        }
      },
      "range": [
        0,
        50
      ],
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 1,
          "column": 50
        }
      },
      "trailingComments": [
        {
          "type": "Block",
          "value": "*\n * The same as `eachOf` but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name eachOfLimit\n * @static\n * @memberOf async\n * @see async.eachOf\n * @alias forEachOfLimit\n * @category Collection\n * @param {Array|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} iteratee - A function to apply to each\n * item in `coll`. The `key` is the item's key, or index in the case of an\n * array. The iteratee is passed a `callback(err)` which must be called once it\n * has completed. If no error has occurred, the callback should be run without\n * arguments or with an explicit `null` argument. Invoked with\n * (item, key, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n ",
          "range": [
            52,
            939
          ],
          "loc": {
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 23,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportDefaultDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "eachOfLimit",
          "range": [
            964,
            975
          ],
          "loc": {
            "start": {
              "line": 24,
              "column": 24
            },
            "end": {
              "line": 24,
              "column": 35
            }
          }
        },
        "params": [
          {
            "type": "Identifier",
            "name": "coll",
            "range": [
              976,
              980
            ],
            "loc": {
              "start": {
                "line": 24,
                "column": 36
              },
              "end": {
                "line": 24,
                "column": 40
              }
            }
          },
          {
            "type": "Identifier",
            "name": "limit",
            "range": [
              982,
              987
            ],
            "loc": {
              "start": {
                "line": 24,
                "column": 42
              },
              "end": {
                "line": 24,
                "column": 47
              }
            }
          },
          {
            "type": "Identifier",
            "name": "iteratee",
            "range": [
              989,
              997
            ],
            "loc": {
              "start": {
                "line": 24,
                "column": 49
              },
              "end": {
                "line": 24,
                "column": 57
              }
            }
          },
          {
            "type": "Identifier",
            "name": "callback",
            "range": [
              999,
              1007
            ],
            "loc": {
              "start": {
                "line": 24,
                "column": 59
              },
              "end": {
                "line": 24,
                "column": 67
              }
            }
          }
        ],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "ExpressionStatement",
              "expression": {
                "type": "CallExpression",
                "callee": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "_eachOfLimit",
                    "range": [
                      1015,
                      1027
                    ],
                    "loc": {
                      "start": {
                        "line": 25,
                        "column": 4
                      },
                      "end": {
                        "line": 25,
                        "column": 16
                      }
                    }
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "limit",
                      "range": [
                        1028,
                        1033
                      ],
                      "loc": {
                        "start": {
                          "line": 25,
                          "column": 17
                        },
                        "end": {
                          "line": 25,
                          "column": 22
                        }
                      }
                    }
                  ],
                  "range": [
                    1015,
                    1034
                  ],
                  "loc": {
                    "start": {
                      "line": 25,
                      "column": 4
                    },
                    "end": {
                      "line": 25,
                      "column": 23
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "Identifier",
                    "name": "coll",
                    "range": [
                      1035,
                      1039
                    ],
                    "loc": {
                      "start": {
                        "line": 25,
                        "column": 24
                      },
                      "end": {
                        "line": 25,
                        "column": 28
                      }
                    }
                  },
                  {
                    "type": "Identifier",
                    "name": "iteratee",
                    "range": [
                      1041,
                      1049
                    ],
                    "loc": {
                      "start": {
                        "line": 25,
                        "column": 30
                      },
                      "end": {
                        "line": 25,
                        "column": 38
                      }
                    }
                  },
                  {
                    "type": "Identifier",
                    "name": "callback",
                    "range": [
                      1051,
                      1059
                    ],
                    "loc": {
                      "start": {
                        "line": 25,
                        "column": 40
                      },
                      "end": {
                        "line": 25,
                        "column": 48
                      }
                    }
                  }
                ],
                "range": [
                  1015,
                  1060
                ],
                "loc": {
                  "start": {
                    "line": 25,
                    "column": 4
                  },
                  "end": {
                    "line": 25,
                    "column": 49
                  }
                }
              },
              "range": [
                1015,
                1061
              ],
              "loc": {
                "start": {
                  "line": 25,
                  "column": 4
                },
                "end": {
                  "line": 25,
                  "column": 50
                }
              }
            }
          ],
          "range": [
            1009,
            1063
          ],
          "loc": {
            "start": {
              "line": 24,
              "column": 69
            },
            "end": {
              "line": 26,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          955,
          1063
        ],
        "loc": {
          "start": {
            "line": 24,
            "column": 15
          },
          "end": {
            "line": 26,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": "*\n * The same as `eachOf` but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name eachOfLimit\n * @static\n * @memberOf async\n * @see async.eachOf\n * @alias forEachOfLimit\n * @category Collection\n * @param {Array|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} iteratee - A function to apply to each\n * item in `coll`. The `key` is the item's key, or index in the case of an\n * array. The iteratee is passed a `callback(err)` which must be called once it\n * has completed. If no error has occurred, the callback should be run without\n * arguments or with an explicit `null` argument. Invoked with\n * (item, key, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n ",
            "range": [
              52,
              939
            ],
            "loc": {
              "start": {
                "line": 3,
                "column": 0
              },
              "end": {
                "line": 23,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": []
      },
      "range": [
        940,
        1063
      ],
      "loc": {
        "start": {
          "line": 24,
          "column": 0
        },
        "end": {
          "line": 26,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": "*\n * The same as `eachOf` but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name eachOfLimit\n * @static\n * @memberOf async\n * @see async.eachOf\n * @alias forEachOfLimit\n * @category Collection\n * @param {Array|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} iteratee - A function to apply to each\n * item in `coll`. The `key` is the item's key, or index in the case of an\n * array. The iteratee is passed a `callback(err)` which must be called once it\n * has completed. If no error has occurred, the callback should be run without\n * arguments or with an explicit `null` argument. Invoked with\n * (item, key, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n ",
          "range": [
            52,
            939
          ],
          "loc": {
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 23,
              "column": 3
            }
          }
        }
      ]
    }
  ],
  "sourceType": "module",
  "range": [
    0,
    1063
  ],
  "loc": {
    "start": {
      "line": 1,
      "column": 0
    },
    "end": {
      "line": 26,
      "column": 1
    }
  },
  "comments": [
    {
      "type": "Block",
      "value": "*\n * The same as `eachOf` but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name eachOfLimit\n * @static\n * @memberOf async\n * @see async.eachOf\n * @alias forEachOfLimit\n * @category Collection\n * @param {Array|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} iteratee - A function to apply to each\n * item in `coll`. The `key` is the item's key, or index in the case of an\n * array. The iteratee is passed a `callback(err)` which must be called once it\n * has completed. If no error has occurred, the callback should be run without\n * arguments or with an explicit `null` argument. Invoked with\n * (item, key, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n ",
      "range": [
        52,
        939
      ],
      "loc": {
        "start": {
          "line": 3,
          "column": 0
        },
        "end": {
          "line": 23,
          "column": 3
        }
      }
    }
  ]
}